@model FireV2.Models.IndividualHistory

@{
    ViewBag.Title = "..:ثبت عملیات انفرادی:..";
    int i = 0;
    string atid = Request.QueryString["atid"];

    var Period = ViewBag.Id;
    var Fromdate = ViewBag.Fromdate;
    var Todate = ViewBag.Todate;

}
<style>
    span {
        color: #980909;
    }

    td {
        padding: 3px;
    }

    #TotalTimeWorkTime {
        background-color: #ed8e11;
    }

    #TotalScore {
        background-color: #a8a21d;
    }

    #IndOperTotalFinalOper {
        background-color: #ed8e11;
    }

    #IndOperTotalFaults {
        background-color: red;
    }

    #IndOperScore {
        background-color: #eee533;
    }

    #div {
        width: 100%;
        height: 400px;
        background-repeat: no-repeat;
        background-size: contain;
        border: 1px solid red;
    }

    #Team {
        color: #86af20;
    }
</style>
<br />
<br />
<br />
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="panel panel-default">
        <div class="panel-heading" >
            <div class="panel-heading">
                <div class="row style3">
                    <div class="col-md-4">
                     عملیات انفرادی

                    </div>
                    <div class="col-md-3 ">
                        نام آتشنشان:@Model.Athlete.FullName

                    </div>
                    <div class="col-md-5 ">
                    عنوان دوره   :    @Model.Period.SeasonTitle
                    </div>
                </div>

            </div>
        </div>
        <div class="panel-body">
           @foreach (var item in (List<FireV2.Models.IndOperationItemsByPeriod>)ViewBag.ItemsByPeriod)
           {
               var temp = Model.IndivisualOperationHistoryItems.Where(m => m.IndOperationItemId == item.IndOperationItemId).FirstOrDefault();
               string prename = "items[" + i.ToString() + "].";
            <input type="hidden" name="@(prename + "IndOperationItemId")" value="@item.IndOperationItemId" />
            <div class="form-group">
                <div class="col-md-4 ">
                    <label>@item.IndividualOperationItem.IndOperationTitle</label>
                    <input type="text" name="@(prename + "IndOperationTime")" value="@(null!=temp? temp.IndOperationTime:"0")" class="phritem  form-control input-lg" data-itemid="@item.IndOperationItemId" />
                </div>
            </div>
               i++;
           }
        </div>
    </div>
    <div class="form-horizontal panel panel-default">
        @Html.HiddenFor(model => model.AthleteId)
        @Html.HiddenFor(model => model.PeriodId)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       
        <div class="panel-body">
            <div class="row">
                <div class="col-md-6 ">
                    @Html.LabelFor(model => model.IndOperTotalTime, htmlAttributes: new { @class = "" })

                    <div style="">
                        <div class="input-group" style="margin-bottom: 10px">
                            <span class="input-group-addon">
                                <i class="fa fa-user-circle-o fa-2x">
                                </i>
                            </span>
                            @Html.EditorFor(model => model.IndOperTotalTime, new { htmlAttributes = new { @class = "form-control input-lg" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.IndOperTotalTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-6 container">
                    @Html.LabelFor(model => model.IndOperTotalFaults, htmlAttributes: new { @class = "" })
                    <div style="">
                        <div class="input-group" style="margin-bottom: 10px">
                            <span class="input-group-addon">
                                <i class="fa fa-user-circle-o fa-2x">
                                </i>
                            </span>
                            @Html.EditorFor(model => model.IndOperTotalFaults, new { htmlAttributes = new { @class = "form-control input-lg" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.IndOperTotalFaults, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-6 container">
                    @Html.LabelFor(model => model.IndOperTotalFinalOper, htmlAttributes: new { @class = "" })
                    <div style="">
                        <div class="input-group" style="margin-bottom: 10px">
                            <span class="input-group-addon">
                                <i class="fa fa-user-circle-o fa-2x">
                                </i>
                            </span>
                            @Html.EditorFor(model => model.IndOperTotalFinalOper, new { htmlAttributes = new { @class = "form-control input-lg" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.IndOperTotalFinalOper, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-6 container">
                    @Html.LabelFor(model => model.IndOperScore, htmlAttributes: new { @class = "" })
                    <div style="">
                        <div class="input-group" style="margin-bottom: 10px">
                            <span class="input-group-addon">
                                <i class="fa fa-user-circle-o fa-2x">
                                </i>
                            </span>
                            @Html.EditorFor(model => model.IndOperScore, new { htmlAttributes = new { @class = "form-control input-lg" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.IndOperScore, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        @{
            var Date1 = Fromdate;
            var Date2 = Todate;
            var Date = PersianDateTime.Now.ToString(PersianDateTimeFormat.Date);
        }
        @*@if (string.Compare(Date, Fromdate) >= 0 && string.Compare(Date, Todate) <= 0)
        {*@
                <input type="submit" value="ثبت و ویرایش اطلاعات" class="btn btn-success" />
        @*}*@
            <a href="/Athletes/DataEntry/@Period?atid=@atid" style="color:#ffffff" class="elements btn btn-info"><span>بازگشت</span></a>
    </div>
}
@section scripts{
    <script>
        
        $(document).delegate('#IndOperTotalFaults', 'change', function (e) {
            var totalTime = ToFloat($('#IndOperTotalTime').val()) + ToFloat($('#IndOperTotalFaults').val());
            $('#IndOperTotalFinalOper').val(totalTime.toFixed(2));
            $('#TotalTimeWorkTime').trigger('change');
            $('#IndOperTotalFinalOper').trigger('change');
        });
        $(document).delegate('#IndOperTotalTime', 'change', function (e) {

            var totalTime = ToFloat($('#IndOperTotalTime').val()) + ToFloat($('#IndOperTotalFaults').val());

            $('#IndOperTotalFinalOper').val(totalTime.toFixed(2));
            $('#TotalTimeWorkTime').trigger('change');
            $('#IndOperTotalFinalOper').trigger('change');
        });
        $(document).delegate('#IndOperTotalFinalOper', 'change', function () {
            var url = '/IndividualHistories/GetScoreByTime?id=' +@Period + '&time=' + $(this).val();
            $.ajax({
                type: 'get',
                url: url,
                data: null,
                success: function (data) {
                    $('#IndOperScore').val(data);
                    $('#IndOperScore').trigger('keyUp');
                }
            })
        });
     
    $(document).delegate('#IndOperTotalFaults', 'change', function (e) {
        $('.phritem').trigger('change');
    });

    function ToFloat(input) {
        return parseFloat(input.replace('/', '.'));
    }

    function ToFloatString(input) {
        return input.toString().replace('.', '/');
    }
    </script>
}